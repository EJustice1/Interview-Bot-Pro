# Terraform
terraform/.terraform/
terraform/*.tfstate
terraform/*.tfstate.*
terraform/terraform.tfvars # IMPORTANT - Contains sensitive values & environment specifics
terraform/.terraform.lock.hcl
terraform/crash.log
terraform/.tfvars # Any other .tfvars files if you use them for different envs

# Node.js (if your function code is in a subdirectory like 'user_auth_service/')
user_auth_service/node_modules/
user_auth_service/.npm
user_auth_service/npm-debug.log*
user_auth_service/yarn-debug.log*
user_auth_service/yarn-error.log*
user_auth_service/service-account-key.json # IMPORTANT - If you download SA keys for local dev

node_modules/
.npm
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Go (from previous attempts or if you add Go services later)
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, build with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Go workspace directory an CWD builds
bin/
pkg/

# Vendored dependencies (if you commit your source but not explicit vendor dir from Cloud Build)
# However, for Cloud Build with Go, zipping the vendor/ dir is common.
# If you choose NOT to commit the vendor/ dir for Go (relying on go mod download):
# dummy_function_code/vendor/ # Or your_go_function_code/vendor/

# Zip files (if you generate them locally and don't want to commit them)
# Often the source code is committed, and the zip is a build artifact.
*.zip 
# If you decide to commit your source code zip (user-auth-source.zip) to track its versions,
# then you would NOT add *.zip or its specific name here.
# However, usually, the source code (e.g., dummy_function_code_node/) is committed,
# and the zip is built during a CI/CD step or just before deployment.
# For simplicity during development, you might be creating it manually.
# If you are creating it manually and a CI/CD process will build it later,
# then ignoring it is fine. If it's THE source for Terraform, maybe don't ignore it
# or ignore it and have a script create it from committed source.
# Given our current flow, `user-auth-source.zip` IS the source for Terraform object.
# So, decide if you want to commit this generated zip or the source JS/Go files and a build script.
# For now, let's assume you commit the source JS/Go and the zip is an artifact.
user-auth-source.zip # If you build it from source and don't want to commit the artifact

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Thumbnail cache files
._*

# Files that might appear in the root of a volume
.Spotlight-V100
.Trashes

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# IDE / Editor specific files
.idea/ # IntelliJ
.vscode/ # Visual Studio Code (allow users to commit their launch.json, extensions.json if desired)
# To ignore all .vscode except specific files:
#.vscode/*
#!.vscode/settings.json
#!.vscode/tasks.json
#!.vscode/launch.json
#!.vscode/extensions.json
*.sublime-project
*.sublime-workspace
*.tmproj
*.bak
*.swp
*~

# Log files
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables file (common pattern)
.env
.env.*
!.env.example # Often an example .env file is committed

# Compiled output
dist/
build/
out/